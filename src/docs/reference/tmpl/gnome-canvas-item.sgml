<!-- ##### SECTION Title ##### -->
GnomeCanvasItem

<!-- ##### SECTION Short_Description ##### -->
Base class for all canvas items

<!-- ##### SECTION Long_Description ##### -->
<para>
This is the base class for all canvas items. Canvas items are the drawing
elements of a #GnomeCanvas. Example items include lines,
ellipses, polygons, images, text, curves and even arbitrary GTK+ widgets.
</para>

<para>
Canvas items use the GObject property system to query and set parameters.
Properties are inherited so, for example, a #GnomeCanvasPolygon has
a "fill-color" property that is inherited from its parent class object
#GnomeCanvasShape. So be sure to check the parent classes of #GnomeCanvasItem
objects when looking for item properties. More information on GObject
properties can be found in the glib library GObject API reference
documentation.
</para>

<para>
To create a new canvas item call gnome_canvas_item_new() which takes a
parent #GnomeCanvasGroup, GType of the item to create, and a NULL terminated
list of name/value GObject properties to set for the new item.
</para>

<para>
To change an existing canvas item's properties call gnome_canvas_item_set(),
or g_object_set() can also be used.
</para>

<para>
There are several functions to change the drawing stacking order of an item.
Call gnome_canvas_item_raise() to raise an item a specified number of
positions or gnome_canvas_item_lower() to lower it. To raise an item to the
top call gnome_canvas_item_raise_to_top(). The
gnome_canvas_item_lower_to_bottom() function will put it at the bottom.
</para>

<para>
To show an item call gnome_canvas_item_show(). Note that canvas item's are
shown by default and so do not need to be explicitly shown after creation
(contrary to GTK+ widget behavior). Call gnome_canvas_item_hide() to hide an
item.
</para>

<para>
To move an item relative to its current position (item coordinates) call
gnome_canvas_item_move() or gnome_canvas_item_affine_relative() for more
complex transforms. gnome_canvas_item_affine_absolute() can be used to
set an item's transform to specific values (not offsets).
</para>

<para>
To convert between world and item coordinate systems call
gnome_canvas_item_w2i(), and to convert in the other direction call
gnome_canvas_item_i2w(). To get the transform for converting from item
to world coordinates use gnome_canvas_item_i2w_affine() or for converting
item to canvas coordinates, gnome_canvas_item_i2c_affine().
</para>

<para>
Handling user input for interactive items is accomplished through a
few functions and the "event" signal. To grab the mouse cursor call
gnome_canvas_item_grab(), it can be ungrabbed with
gnome_canvas_item_ungrab() (see gdk_pointer_grab() of the GTK+ library
for details). To grab keyboard focus call
gnome_canvas_item_grab_focus().  Received events will be signaled via
the "event" signal.
</para>

<para>
Some other useful functions include a reparenting routine,
gnome_canvas_item_reparent(), and a function to query the bounding
box of an item (a minumum rectangular area containing all parts of the item),
gnome_canvas_item_get_bounds().
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### STRUCT GnomeCanvasItem ##### -->
<para>
This structure should not be accessed directly. Use the object's properties
and functions for querying or changing its parameters.
</para>


<!-- ##### SIGNAL GnomeCanvasItem::event ##### -->
<para>
Signals mouse button clicks, motion, enter/leave, and key press events
on canvas items. Use this signal to create user interactive items.
The <structfield>x</structfield> and <structfield>y</structfield>
coordinates of the @event structure have been converted to canvas world
coordinates.
</para>

@canvasitem: the object which received the signal.
@event: A GdkEvent structure containing the event that occurred.
@Returns: Signal handlers should return %TRUE to stop signal emission or %FALSE
to allow other signal handlers to process this event.

<!-- ##### ARG GnomeCanvasItem:parent ##### -->
<para>
Parent #GnomeCanvasGroup that contains the item.
</para>

<!-- ##### STRUCT GnomeCanvasItemClass ##### -->
<para>
The internals of this class structure are of interest to those creating
objects derived from #GnomeCanvasItem.
</para>

@parent_class: Parent derived class.
@update: Update method called to tell the item to update itself.
@realize: Realize an item (create graphics contexts, etc).
@unrealize: Unrealize an item.
@map: Map an item - normally only needed by items with their own GdkWindows.
@unmap: Unmap an item.
@coverage: Return the microtile coverage of the item.
@draw: Draw an item of this type.
@render: Render the item for anti-aliased canvases.
@point: Calculate the distance from an item to a point.
@bounds: Fetch the item's bounding box (rectangular area it occupies).
@event: The class signal method for the "event" signal.
@spare_vmethods: Reserved.

<!-- ##### FUNCTION gnome_canvas_item_new ##### -->
<para>

</para>

@parent: 
@type: 
@first_arg_name: 
@Varargs: 
@Returns: 


<!-- ##### FUNCTION gnome_canvas_item_construct ##### -->
<para>

</para>

@item: 
@parent: 
@first_arg_name: 
@args: 


<!-- ##### FUNCTION gnome_canvas_item_set ##### -->
<para>

</para>

@item: 
@first_arg_name: 
@Varargs: 


<!-- ##### FUNCTION gnome_canvas_item_set_valist ##### -->
<para>

</para>

@item: 
@first_arg_name: 
@args: 


<!-- ##### FUNCTION gnome_canvas_item_move ##### -->
<para>

</para>

@item: 
@dx: 
@dy: 


<!-- ##### FUNCTION gnome_canvas_item_affine_relative ##### -->
<para>

</para>

@item: 
@affine: 


<!-- ##### FUNCTION gnome_canvas_item_affine_absolute ##### -->
<para>

</para>

@item: 
@affine: 


<!-- ##### FUNCTION gnome_canvas_item_raise ##### -->
<para>

</para>

@item: 
@positions: 


<!-- ##### FUNCTION gnome_canvas_item_lower ##### -->
<para>

</para>

@item: 
@positions: 


<!-- ##### FUNCTION gnome_canvas_item_raise_to_top ##### -->
<para>

</para>

@item: 


<!-- ##### FUNCTION gnome_canvas_item_lower_to_bottom ##### -->
<para>

</para>

@item: 


<!-- ##### FUNCTION gnome_canvas_item_show ##### -->
<para>

</para>

@item: 


<!-- ##### FUNCTION gnome_canvas_item_hide ##### -->
<para>

</para>

@item: 


<!-- ##### FUNCTION gnome_canvas_item_grab ##### -->
<para>

</para>

@item: 
@event_mask: 
@cursor: 
@etime: 
@Returns: 


<!-- ##### FUNCTION gnome_canvas_item_ungrab ##### -->
<para>

</para>

@item: 
@etime: 


<!-- ##### FUNCTION gnome_canvas_item_w2i ##### -->
<para>

</para>

@item: 
@x: 
@y: 


<!-- ##### FUNCTION gnome_canvas_item_i2w ##### -->
<para>

</para>

@item: 
@x: 
@y: 


<!-- ##### FUNCTION gnome_canvas_item_i2w_affine ##### -->
<para>

</para>

@item: 
@affine: 


<!-- ##### FUNCTION gnome_canvas_item_i2c_affine ##### -->
<para>

</para>

@item: 
@affine: 


<!-- ##### FUNCTION gnome_canvas_item_reparent ##### -->
<para>

</para>

@item: 
@new_group: 


<!-- ##### FUNCTION gnome_canvas_item_grab_focus ##### -->
<para>

</para>

@item: 


<!-- ##### FUNCTION gnome_canvas_item_get_bounds ##### -->
<para>

</para>

@item: 
@x1: 
@y1: 
@x2: 
@y2: 


<!-- ##### FUNCTION gnome_canvas_item_request_update ##### -->
<para>

</para>

@item: 


